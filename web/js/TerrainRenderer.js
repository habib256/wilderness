/**
 * TerrainRenderer - Rendu 3D des terrains avec Three.js
 */
class TerrainRenderer {
    constructor(canvas) {
        this.canvas = canvas;
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.controls = null;
        this.terrainMesh = null;
        this.animationId = null;
        
        // Param√®tres de rendu
        this.settings = {
            heightScale: 20, // Valeur par d√©faut mise √† jour
            resolution: 4096,
            meshQuality: 'high', // Qualit√© augment√©e pour r√©duire le faceting
            sunPosition: 180, // Position du soleil en degr√©s (0=Nord, 90=Est, 180=Sud/Z√©nith, 270=Ouest)
            shadowQuality: 'medium', // 'low', 'medium', 'high' - qualit√© des ombres (r√©duit pour performances)
            adaptiveShadows: true, // Active l'adaptation automatique des param√®tres d'ombres
            shadowSoftness: 3.0 // Facteur de douceur des ombres - valeur fixe PCF
        };
        
        // R√©f√©rence au terrain actuel pour l'analyse de complexit√©
        this.currentTerrainData = null;

        // R√©f√©rence √† la lumi√®re directionnelle pour la mise √† jour dynamique
        this.directionalLight = null;
        
        // Soleil 3D pulsant
        this.sunMesh = null;
        this.sunPulseTime = 0;
        this.sunAnimationReady = false;

        this.init();
    }

    /**
     * Initialise le rendu 3D
     */
    init() {
        // R√©cup√®re le canvas existant
        const canvas = document.getElementById('canvas3d');
        if (!canvas) {
            throw new Error('Canvas #canvas3d introuvable');
        }

        // Initialise le renderer avec le canvas existant
        this.renderer = new THREE.WebGLRenderer({ 
            canvas: canvas,
            antialias: true,
            alpha: false
        });
        
        // Configuration du renderer optimis√©e pour les ombres
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        this.renderer.setClearColor(0x87CEEB, 1.0); // Bleu ciel
        
        // Configuration optimis√©e des ombres avec PCF Soft fixe
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap; // PCF Soft fixe (douceur 3.0)
        this.renderer.shadowMap.autoUpdate = true;
        
        // Options suppl√©mentaires pour √©liminer les artefacts
        this.renderer.physicallyCorrectLights = true;
        
        // Am√©liore le rendu g√©n√©ral
        this.renderer.outputColorSpace = THREE.SRGBColorSpace;
        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
        this.renderer.toneMappingExposure = 1.0;
        
        // Optimisations de performance
        this.renderer.sortObjects = true;
        this.renderer.autoClear = true;

        console.log(`üñ•Ô∏è Renderer initialis√©: ${window.innerWidth}x${window.innerHeight}`);

        // Initialise la sc√®ne
        this.scene = new THREE.Scene();
        this.scene.fog = new THREE.Fog(0x87CEEB, 100, 1000);

        // Initialise la cam√©ra
        this.camera = new THREE.PerspectiveCamera(
            75, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            2000
        );
        this.camera.position.set(25, 25, 25);

        // Initialise les contr√¥les
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.maxDistance = 500;
        this.controls.minDistance = 5;

        // √âclairage initial
        this.setupLighting(100);

        // √âv√©nements
        window.addEventListener('resize', () => this.onWindowResize());
        
        // Lance le rendu
        this.animate();
        
        console.log('‚úÖ Renderer 3D initialis√©');
    }

    /**
     * Configure l'√©clairage de la sc√®ne
     */
    setupLighting() {
        // Lumi√®re ambiante r√©duite pour ombres tr√®s douces (coh√©rent avec shadowSoftness=3.0)
        const ambientLight = new THREE.AmbientLight(0x606060, 0.4);
        this.scene.add(ambientLight);

        // Lumi√®re directionnelle principale (soleil)
        this.directionalLight = new THREE.DirectionalLight(0xffffff, 0.7);
        this.directionalLight.castShadow = true;
        
        // Configuration des ombres optimis√©e pour performance/qualit√©
        this.directionalLight.shadow.mapSize.width = 4096;   // R√©solution optimis√©e 4K
        this.directionalLight.shadow.mapSize.height = 4096;
        this.directionalLight.shadow.camera.near = 0.1;
        this.directionalLight.shadow.camera.far = 800;
        
        // Bounds adaptatifs selon la position du soleil (mis √† jour dans updateSunPosition)
        this.directionalLight.shadow.camera.left = -150;
        this.directionalLight.shadow.camera.right = 150;
        this.directionalLight.shadow.camera.top = 150;
        this.directionalLight.shadow.camera.bottom = -150;
        
        // Param√®tres anti-aliasing avanc√©s pour √©liminer compl√®tement les bandes
        this.directionalLight.shadow.bias = -0.00005;         // Valeur tr√®s douce de base
        this.directionalLight.shadow.normalBias = 0.008;      // Valeur tr√®s douce de base
        this.directionalLight.shadow.radius = 8;              // Flou plus important pour masquer les artefacts
        this.directionalLight.shadow.blurSamples = 50;        // Beaucoup plus d'√©chantillons
        
        // Protection avanc√©e contre les artefacts de pr√©cision
        this.directionalLight.shadow.camera.matrixAutoUpdate = true;
        
        // Syst√®me de dithering temporel stable
        this.shadowDitherOffset = 0;
        this.ditherPattern = this.generateDitherPattern();
        this.frameCount = 0;

        this.scene.add(this.directionalLight);

        // Lumi√®re de remplissage pour adoucir les ombres et am√©liorer le lissage
        const fillLight = new THREE.DirectionalLight(0x87CEEB, 0.3);
        fillLight.position.set(-80, 60, -60);
        this.scene.add(fillLight);

        // Cr√©ation du soleil 3D pulsant
        this.createSun3D();
        
        // Application de la position initiale du soleil (apr√®s cr√©ation du mesh 3D)
        this.updateSunPosition(this.settings.sunPosition);

        // Helper pour visualiser la lumi√®re (debug)
        // const helper = new THREE.DirectionalLightHelper(this.directionalLight, 5);
        // this.scene.add(helper);
    }

    /**
     * Cr√©e le soleil 3D pulsant
     */
    createSun3D() {
        try {
            // V√©rifie que la sc√®ne est initialis√©e
            if (!this.scene) {
                console.warn('‚ö†Ô∏è Scene non initialis√©e, report de la cr√©ation du soleil');
                return;
            }

            // G√©om√©trie sph√©rique pour le soleil
            const sunGeometry = new THREE.SphereGeometry(8, 32, 16); // Rayon 8, 32 segments
            
            // Mat√©riau √©missif pour simuler la luminosit√© du soleil
            const sunMaterial = new THREE.MeshBasicMaterial({
                color: new THREE.Color(0xFFFF00), // Jaune de base
                emissive: new THREE.Color(0xFFAA00), // √âmission orange
                emissiveIntensity: 0.8
            });
            
            // Cr√©ation du mesh
            this.sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);
            this.sunMesh.name = 'sun3D';
            
            // Le soleil ne projette pas d'ombres mais peut en recevoir (eclipse effet)
            this.sunMesh.castShadow = false;
            this.sunMesh.receiveShadow = false;
            
            // Ajoute le soleil √† la sc√®ne
            this.scene.add(this.sunMesh);
            
            // Position initiale du soleil (appliqu√©e imm√©diatement, avant m√™me l'animation)
            this.applySunInitialPosition();
            
            // Active l'animation apr√®s un court d√©lai pour s'assurer que tout est initialis√©
            setTimeout(() => {
                this.sunAnimationReady = true;
                console.log('‚úÖ Animation du soleil 3D activ√©e');
            }, 100);
            
            console.log('‚òÄÔ∏è Soleil 3D cr√©√© et ajout√© √† la sc√®ne avec position initiale');
        } catch (error) {
            console.error('‚ùå Erreur lors de la cr√©ation du soleil 3D:', error);
        }
    }

    /**
     * Applique la position initiale du soleil imm√©diatement apr√®s sa cr√©ation
     */
    applySunInitialPosition() {
        if (!this.sunMesh || !this.directionalLight) {
            return;
        }

        const angle = this.settings.sunPosition;
        
        // TRAJECTOIRE R√âALISTE : Remappe l'angle du slider (0-360¬∞) vers une trajectoire Est-Ouest (60-300¬∞)
        const realAngle = 60 + (angle / 360) * 240; // Mappe 0-360¬∞ vers 60-300¬∞ (240¬∞ d'arc r√©aliste)
        const realAngleRad = (realAngle * Math.PI) / 180;
        
        // Distance horizontale du soleil  
        const distance = 150;
        
        // HAUTEUR R√âALISTE : Calcule la hauteur selon un arc de cercle naturel
        const sunArcProgress = (realAngle - 60) / 240; // Progression de 0 √† 1 sur l'arc Est-Ouest
        const sunElevationAngle = Math.sin(sunArcProgress * Math.PI); // Sinuso√Øde parfaite 0->1->0
        
        // Hauteur : 15 unit√©s √† l'horizon (aube/cr√©puscule) √† 140 unit√©s au z√©nith (midi)
        const minHorizonHeight = 15;
        const maxZenithHeight = 140;
        let baseHeight = minHorizonHeight + sunElevationAngle * (maxZenithHeight - minHorizonHeight);
        
        // Contrainte physique : le soleil ne peut pas descendre trop bas
        const minSunHeight = 8; // 8 unit√©s minimum au-dessus du sol 
        const height = Math.max(baseHeight, minSunHeight);
        
        // Position X et Z selon l'angle r√©el (trajectoire naturelle Est-Ouest)
        const x = Math.sin(realAngleRad) * distance;
        const z = Math.cos(realAngleRad) * distance;
        
        // Applique la position directement sur le mesh du soleil
        this.sunMesh.position.set(x, height, z);
        
        console.log(`üåÖ Position initiale soleil: ${angle}¬∞‚Üí${realAngle.toFixed(1)}¬∞r√©el (${x.toFixed(1)}, ${height.toFixed(1)}, ${z.toFixed(1)})`);
    }

    /**
     * Met √† jour la position du soleil selon l'angle en degr√©s avec trajectoire r√©aliste
     * @param {number} angle - Angle en degr√©s (remapp√© pour trajectoire Est-Ouest r√©aliste)
     */
    updateSunPosition(angle) {
        if (!this.directionalLight) {
            return;
        }

        // TRAJECTOIRE R√âALISTE : Remappe l'angle du slider (0-360¬∞) vers une trajectoire Est-Ouest (60-300¬∞)
        // 0¬∞ du slider = 60¬∞ r√©el (aube √† l'est-nord-est)
        // 180¬∞ du slider = 180¬∞ r√©el (midi au sud) - Z√âNITH MAXIMUM
        // 360¬∞ du slider = 300¬∞ r√©el (cr√©puscule √† l'ouest-nord-ouest)
        const realAngle = 60 + (angle / 360) * 240; // Mappe 0-360¬∞ vers 60-300¬∞ (240¬∞ d'arc r√©aliste)
        const realAngleRad = (realAngle * Math.PI) / 180;
        
        // Distance horizontale du soleil  
        const distance = 150;
        
        // HAUTEUR R√âALISTE : Calcule la hauteur selon un arc de cercle naturel
        // Le soleil atteint son z√©nith maximum au sud (180¬∞) et descend vers les horizons
        const sunArcProgress = (realAngle - 60) / 240; // Progression de 0 √† 1 sur l'arc Est-Ouest
        const sunElevationAngle = Math.sin(sunArcProgress * Math.PI); // Sinuso√Øde parfaite 0->1->0
        
        // Hauteur : 15 unit√©s √† l'horizon (aube/cr√©puscule) √† 140 unit√©s au z√©nith (midi)
        const minHorizonHeight = 15;
        const maxZenithHeight = 140;
        let baseHeight = minHorizonHeight + sunElevationAngle * (maxZenithHeight - minHorizonHeight);
        
        // Contrainte physique : le soleil ne peut pas descendre trop bas
        const minSunHeight = 8; // 8 unit√©s minimum au-dessus du sol 
        const height = Math.max(baseHeight, minSunHeight);
        
        // Position X et Z selon l'angle r√©el (trajectoire naturelle Est-Ouest)
        const x = Math.sin(realAngleRad) * distance;
        const z = Math.cos(realAngleRad) * distance;
        
        this.directionalLight.position.set(x, height, z);
        
        // Met √† jour la position du soleil 3D pour qu'il suive la lumi√®re
        if (this.sunMesh) {
            this.sunMesh.position.set(x, height, z);
        }
        
        // Ajuste l'intensit√© selon la hauteur r√©aliste (plus faible √† l'aube/cr√©puscule)
        const maxIntensity = 0.8;
        const minIntensity = 0.3;
        // Utilise l'angle d'√©l√©vation pour un calcul plus naturel de l'intensit√©
        const intensity = minIntensity + (maxIntensity - minIntensity) * sunElevationAngle;
        this.directionalLight.intensity = intensity;
        
        // Ajuste les param√®tres d'ombres selon la position du soleil
        this.updateShadowParameters(realAngle, height);
        
        // Couleurs r√©alistes selon la position du soleil dans son arc
        if (sunElevationAngle < 0.3) {
            // Horizons (aube/cr√©puscule) : lumi√®re tr√®s dor√©e/orang√©e
            this.directionalLight.color.setHex(0xFF9944);
        } else if (sunElevationAngle < 0.6) {
            // Matin/apr√®s-midi : lumi√®re l√©g√®rement chaude
            this.directionalLight.color.setHex(0xFFDD88);
        } else {
            // Z√©nith (midi) : lumi√®re blanche pure
            this.directionalLight.color.setHex(0xFFFFFF);
        }
        
        // Stocke l'angle pour r√©f√©rence
        this.settings.sunPosition = angle;
        
        console.log(`‚òÄÔ∏è Position soleil: ${angle}¬∞‚Üí${realAngle.toFixed(1)}¬∞r√©el (${x.toFixed(1)}, ${height.toFixed(1)}, ${z.toFixed(1)}) √©l√©vation=${(sunElevationAngle*100).toFixed(0)}% intensit√©=${intensity.toFixed(2)}`);
    }

    /**
     * Met √† jour les param√®tres d'ombres selon la position du soleil
     * @param {number} angle - Angle du soleil en degr√©s
     * @param {number} height - Hauteur du soleil
     */
    updateShadowParameters(angle, height) {
        if (!this.directionalLight || !this.directionalLight.shadow) {
            return;
        }

        const shadow = this.directionalLight.shadow;
        
        // Ajuste les bounds de la shadow camera de mani√®re plus pr√©cise
        const heightFactor = Math.max(0.3, height / 120); // Facteur bas√© sur la hauteur (0.3 √† 1.0)
        const baseBound = 120;
        
        // Calcule l'extension directionnelle selon l'angle du soleil
        const angleRad = (angle * Math.PI) / 180;
        
        // Extension plus intelligente selon l'angle et la hauteur
        const heightMultiplier = 1 + (2 * (1 - heightFactor)); // Plus d'extension quand le soleil est bas
        const extendX = Math.abs(Math.sin(angleRad)) * 60 * heightMultiplier;
        const extendZ = Math.abs(Math.cos(angleRad)) * 60 * heightMultiplier;
        
        // Bounds adaptatifs avec marge suppl√©mentaire pour les angles extr√™mes
        const marginX = height < 50 ? 30 : 10; // Marge suppl√©mentaire pour angles extr√™mes
        const marginZ = height < 50 ? 30 : 10;
        
        shadow.camera.left = -(baseBound + extendX + marginX);
        shadow.camera.right = baseBound + extendX + marginX;
        shadow.camera.top = baseBound + extendZ + marginZ;
        shadow.camera.bottom = -(baseBound + extendZ + marginZ);
        
        // Ajuste la distance near/far pour √©viter le z-fighting
        shadow.camera.near = height < 40 ? 0.05 : 0.1;
        shadow.camera.far = 1000;
        
        // Ajuste le bias de mani√®re progressive pour √©liminer les artefacts
        const minHeightRef = 30; // R√©f√©rence minimale fixe
        const heightNormalized = Math.max(0, Math.min(1, (height - minHeightRef) / (120 - minHeightRef))); // Normalise entre r√©f√©rence et z√©nith
        
        // D√©tection multi-niveaux des angles probl√©matiques
        const isExtremeAngle = height < 50;
        const isCriticalAngle = height < 35;
        const angleFactor = Math.abs(Math.sin((angle - 180) * Math.PI / 180)); // 0 au sud, 1 √† l'est/ouest
        const isEdgeCase = height <= 12 && angleFactor > 0.9; // Angles tr√®s bas
        
        // Bias adaptatif avec correction sp√©ciale pour cas extr√™mes
        let baseBias = -0.0001;
        let normalBias = 0.01;
        let radius = 4;
        
        // Syst√®me de bias adaptatif intelligent bas√© sur angle et distance
        const biasConfig = this.calculateSmartBias(angle, height, angleFactor, heightNormalized, isEdgeCase, isCriticalAngle, isExtremeAngle);
        
        baseBias = biasConfig.bias;
        normalBias = biasConfig.normalBias;
        radius = biasConfig.radius;
        
        shadow.bias = baseBias;
        shadow.normalBias = normalBias;
        
        // Applique le facteur de douceur utilisateur APR√àS le calcul adaptatif
        const userSoftnessFactor = this.settings.shadowSoftness || 1.0;
        
        // Plages de valeurs plus larges pour rendre les changements plus visibles
        const minRadius = 2;
        const maxRadius = 25; // Augment√© de 15 √† 25
        shadow.radius = Math.min(maxRadius, Math.max(minRadius, radius * userSoftnessFactor));
        
        // Applique aussi le facteur aux √©chantillons de flou avec une plage plus large
        const minSamples = 8;
        const maxSamples = 100; // Augment√© de 50 √† 100
        const baseSamples = 30; // Augment√© de 25 √† 30
        shadow.blurSamples = Math.max(minSamples, Math.min(maxSamples, Math.floor(baseSamples * userSoftnessFactor)));
        
        // Force la mise √† jour de la shadow camera
        shadow.camera.updateProjectionMatrix();
        
        // Log d√©taill√© pour debug des artefacts avec classification pr√©cise
        const totalBound = baseBound + Math.max(extendX, extendZ) + Math.max(marginX, marginZ);
        let debugInfo = '[NORMAL]';
        if (isEdgeCase) debugInfo = '[CRITIQUE]';
        else if (isCriticalAngle) debugInfo = '[TR√àS EXTR√äME]';
        else if (isExtremeAngle) debugInfo = '[EXTR√äME]';
        
        console.log(`üå´Ô∏è Ombres${debugInfo}: angle=${angle.toFixed(0)}¬∞, h=${height.toFixed(0)}, bounds=¬±${totalBound.toFixed(0)}, bias=${shadow.bias.toFixed(5)}, normalBias=${shadow.normalBias.toFixed(3)}, radius=${shadow.radius.toFixed(1)}, samples=${shadow.blurSamples}, softness=${userSoftnessFactor.toFixed(1)} (${this.getShadowMapTypeName()})`);
        
        // Protection suppl√©mentaire contre les artefacts persistants
        if (isEdgeCase || (isExtremeAngle && angleFactor > 0.85)) {
            // Force une mise √† jour compl√®te pour les cas les plus probl√©matiques
            shadow.camera.updateMatrixWorld(true);
            shadow.camera.updateWorldMatrix(true, false);
            
            // Dithering temporel stable pour √©liminer les bandes r√©guli√®res
            const ditherOffset = this.getTemporalDither();
            this.directionalLight.position.x += ditherOffset.x;
            this.directionalLight.position.z += ditherOffset.z;
            
            console.log(`‚ö†Ô∏è Protection renforc√©e appliqu√©e pour angle probl√©matique: ${angle.toFixed(0)}¬∞`);
        }
    }

    /**
     * Met √† jour l'animation de pulsation du soleil 3D
     */
    updateSunPulsing() {
        // V√©rifications de s√©curit√©
        if (!this.sunAnimationReady || !this.sunMesh || !this.sunMesh.material || !this.sunMesh.material.color || !this.sunMesh.material.emissive) {
            return;
        }

        // Incr√©mente le temps de pulsation
        this.sunPulseTime += 0.02; // Vitesse de pulsation

        // Calcul de la pulsation (oscillation entre 0.5 et 1.5)
        const pulseIntensity = 1.0 + 0.5 * Math.sin(this.sunPulseTime);
        
        // Calcul de la couleur pulsante (rouge -> jaune -> rouge)
        const colorPhase = (Math.sin(this.sunPulseTime * 0.7) + 1) / 2; // 0 √† 1
        
        // Interpolation rouge (1,0,0) vers jaune (1,1,0)
        const red = 1.0;
        const green = colorPhase;
        const blue = 0.0;
        
        // Application de la couleur et de l'intensit√© avec v√©rifications
        try {
            this.sunMesh.material.color.setRGB(red, green, blue);
            this.sunMesh.material.emissive.setRGB(red * 0.8, green * 0.6, blue * 0.2);
            this.sunMesh.material.emissiveIntensity = pulseIntensity;
            
            // L√©g√®re variation de taille pour accentuer la pulsation
            const scaleVariation = 1.0 + 0.1 * Math.sin(this.sunPulseTime * 1.3);
            this.sunMesh.scale.setScalar(scaleVariation);
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur lors de la mise √† jour de la pulsation du soleil:', error);
        }
    }

    /**
     * Ajoute une grille de r√©f√©rence
     */
    addGrid() {
        const gridHelper = new THREE.GridHelper(100, 20, 0x888888, 0x444444);
        gridHelper.position.y = -0.1;
        this.scene.add(gridHelper);
    }

    /**
     * Ajoute un cube de test pour v√©rifier le rendu
     */
    addTestCube() {
        const geometry = new THREE.BoxGeometry(10, 10, 10);
        const material = new THREE.MeshLambertMaterial({ color: 0xff0000 });
        this.testCube = new THREE.Mesh(geometry, material);
        this.testCube.position.set(0, 5, 0);
        this.scene.add(this.testCube);
        console.log('üé≤ Cube de test ajout√©');
    }

    /**
     * Supprime le cube de test
     */
    removeTestCube() {
        if (this.testCube) {
            this.scene.remove(this.testCube);
            this.testCube.geometry.dispose();
            this.testCube.material.dispose();
            this.testCube = null;
            console.log('üé≤ Cube de test supprim√©');
        }
    }

    /**
     * Positionne la cam√©ra pour une vue optimale du terrain
     */
    resetCamera(size = 100) {
        if (!this.camera) return;
        
        // Position optimis√©e pour une vue plus proche du terrain
        const distance = 150; // Distance r√©duite pour une vue plus proche
        this.camera.position.set(distance, distance * 0.8, distance);
        this.camera.lookAt(0, 25, 0); // Regarde l√©g√®rement au-dessus du sol
        
        // Ajuste les param√®tres de la cam√©ra
        this.camera.near = 0.1;
        this.camera.far = 5000;
        this.camera.updateProjectionMatrix();
        
        if (this.controls) {
            this.controls.target.set(0, 25, 0); // Centre sur le terrain avec hauteur
            this.controls.update();
        }
        
        console.log(`üì∑ Cam√©ra: pos(${this.camera.position.x}, ${this.camera.position.y}, ${this.camera.position.z})`);
        console.log(`üì∑ Cam√©ra: near=${this.camera.near}, far=${this.camera.far}`);
    }



    /**
     * Calcule la r√©solution des segments bas√©e sur la qualit√©
     */
    getSegmentResolution(width, height) {
        const qualityLimits = {
            'low': 128,
            'medium': 256, 
            'high': 512,
            'ultra': 1024,
            'extreme': 2048
        };
        
        const maxSegments = qualityLimits[this.settings.meshQuality] || 256;
        const segmentsX = Math.min(maxSegments, width - 1);
        const segmentsY = Math.min(maxSegments, height - 1);
        

        
        console.log(`üéØ Qualit√© ${this.settings.meshQuality}: ${segmentsX}x${segmentsY} segments (limite: ${maxSegments})`);
        
        return { segmentsX, segmentsY };
    }

    /**
     * G√©n√®re la g√©om√©trie 3D du terrain √† partir des donn√©es de hauteur
     */
    generateTerrainGeometry(terrainData) {
        const { width, height, heightData } = terrainData;
        
        console.log(`üîß G√©n√©ration g√©om√©trie pour ${width}x${height} heightmap`);
        
        // Utilise la r√©solution adaptative bas√©e sur la qualit√© d√©tect√©e
        const { segmentsX, segmentsY } = this.getSegmentResolution(width, height);
        
        console.log(`üìê Cr√©√© g√©om√©trie ${segmentsX}x${segmentsY} segments`);
        
        // Cr√©e la g√©om√©trie manuellement pour √™tre s√ªr qu'elle soit correcte
        const geometry = new THREE.BufferGeometry();
        
        // Calcule le nombre de vertices et faces
        const verticesCount = (segmentsX + 1) * (segmentsY + 1);
        const facesCount = segmentsX * segmentsY * 2; // 2 triangles par carr√©
        
        console.log(`üìä ${verticesCount} vertices, ${facesCount} triangles`);
        
        // Arrays pour les donn√©es
        const vertices = new Float32Array(verticesCount * 3);
        const indices = new Uint32Array(facesCount * 3);
        const uvs = new Float32Array(verticesCount * 2);
        
        // G√©n√®re les vertices
        let vertexIndex = 0;
        const heightScale = this.settings.heightScale;
        
        for (let y = 0; y <= segmentsY; y++) {
            for (let x = 0; x <= segmentsX; x++) {
                // Position dans l'espace 3D
                const posX = (x / segmentsX - 0.5) * 200; // [-100, 100]
                const posZ = (y / segmentsY - 0.5) * 200; // [-100, 100]
                // Mapping vers heightmap et UV (inversion X uniquement)
                const imgX = Math.floor(((segmentsX - x) / segmentsX) * (width - 1)); // <-- inversion X
                const imgY = Math.floor(((segmentsY - y) / segmentsY) * (height - 1));
                const clampedX = Math.max(0, Math.min(width - 1, imgX));
                const clampedY = Math.max(0, Math.min(height - 1, imgY));
                const heightIndex = clampedY * width + clampedX;
                let heightValue = heightData[heightIndex] || 0;
                
                // Note: Les terrains r√©els sont d√©j√† normalis√©s correctement par leur post-traitement
                // Mer: [-0.1, 0], Terre: [0, 1], pas besoin d'inversion
                // if (terrainData.isRealTerrain) {
                //     heightValue = 1.0 - heightValue; // REMOVED: Inversion inappropri√©e
                // }
                
                const posY = heightValue * heightScale;
                // Stocke le vertex
                vertices[vertexIndex * 3] = posX;
                vertices[vertexIndex * 3 + 1] = posY;
                vertices[vertexIndex * 3 + 2] = posZ;
                // UV coordinates (inversion X uniquement)
                uvs[vertexIndex * 2] = 1 - (x / segmentsX);
                uvs[vertexIndex * 2 + 1] = 1 - (y / segmentsY);
                vertexIndex++;
            }
        }
        
        // G√©n√®re les indices pour les triangles
        let indexCount = 0;
        for (let y = 0; y < segmentsY; y++) {
            for (let x = 0; x < segmentsX; x++) {
                const a = y * (segmentsX + 1) + x;
                const b = y * (segmentsX + 1) + x + 1;
                const c = (y + 1) * (segmentsX + 1) + x;
                const d = (y + 1) * (segmentsX + 1) + x + 1;
                
                // Premier triangle
                indices[indexCount * 3] = a;
                indices[indexCount * 3 + 1] = b;
                indices[indexCount * 3 + 2] = c;
                indexCount++;
                
                // Deuxi√®me triangle
                indices[indexCount * 3] = b;
                indices[indexCount * 3 + 1] = d;
                indices[indexCount * 3 + 2] = c;
                indexCount++;
            }
        }
        
        // Assigne les donn√©es √† la g√©om√©trie
        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
        geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));
        geometry.setIndex(new THREE.BufferAttribute(indices, 1));
        
        // Calcule les normales
        geometry.computeVertexNormals();
        geometry.computeBoundingBox();
        geometry.computeBoundingSphere();
        
        console.log(`‚úÖ G√©om√©trie g√©n√©r√©e avec ${vertexIndex} vertices et ${indexCount} triangles`);
        console.log(`üì¶ Bounding box: min(${geometry.boundingBox.min.x.toFixed(1)}, ${geometry.boundingBox.min.y.toFixed(1)}, ${geometry.boundingBox.min.z.toFixed(1)}) max(${geometry.boundingBox.max.x.toFixed(1)}, ${geometry.boundingBox.max.y.toFixed(1)}, ${geometry.boundingBox.max.z.toFixed(1)})`);
        
        return geometry;
    }

    /**
     * G√©n√®re le mat√©riau du terrain selon le mode de rendu
     */
    generateTerrainMaterial(terrainData) {
        // Mode normal - utilise MeshBasicMaterial pour √™tre s√ªr qu'il soit visible
        const { width, height, heightData } = terrainData;
        
        // Cr√©e une texture bas√©e sur l'altitude
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        const imageData = ctx.createImageData(width, height);
        const data = imageData.data;
        
        const heightScale = this.settings.heightScale;
        
        // G√©n√®re la texture d'altitude
        const isRealTerrain = this.currentTerrainData && this.currentTerrainData.isRealTerrain;
        let minAlt = Infinity, maxAlt = -Infinity;
        for (let i = 0; i < heightData.length; i++) {
            let rawHeight = heightData[i];
            // Note: Terrains r√©els d√©j√† normalis√©s par post-traitement
            // if (isRealTerrain) {
            //     rawHeight = 1.0 - rawHeight; // REMOVED: Inversion inappropri√©e
            // }
            const alt = rawHeight * heightScale;
            if (alt < minAlt) minAlt = alt;
            if (alt > maxAlt) maxAlt = alt;
        }
        const altRange = maxAlt - minAlt || 1;
        for (let i = 0; i < heightData.length; i++) {
            // Hauteur r√©elle - INVERSION pour terrain r√©el si n√©cessaire
            let rawHeight = heightData[i];
            
            // Note: Terrains r√©els d√©j√† normalis√©s (mer: valeurs n√©gatives, terre: valeurs positives)
            // if (isRealTerrain) {
            //     rawHeight = 1.0 - rawHeight; // REMOVED: Inversion inappropri√©e  
            // }
            
            const alt = rawHeight * heightScale;
            // Normalisation par rapport √† l'altitude r√©elle affich√©e
            const h = (alt - minAlt) / altRange;
            let r, g, b;
            
            // D√âTECTION MER BAS√âE SUR ALTITUDE R√âELLE POUR TERRAINS NORMALIS√âS
            // Pour les terrains r√©els: valeurs n√©gatives = mer, valeurs positives = terre
            const isSeaLevel = isRealTerrain ? (rawHeight <= 0.0) : (alt <= maxAlt * 0.01);
            const sandThreshold = isRealTerrain ? 0.05 : (maxAlt * 0.02); // Zone c√¥ti√®re
            
            // Si c'est de la mer (altitude <= 0 pour terrains r√©els) ‚Üí BLEU OC√âAN
            if (isSeaLevel) {
                // Bleu oc√©an profond - couleur plus r√©aliste pour la mer
                r = 0;
                g = 119;
                b = 190;
            } else if (isRealTerrain ? (rawHeight <= sandThreshold) : (alt <= sandThreshold)) {
                // Transition eau ‚Üí sable (bleu oc√©an ‚Üí jaune sable)
                const transitionValue = isRealTerrain ? rawHeight : alt;
                const transitionMin = isRealTerrain ? 0.0 : (maxAlt * 0.01);
                const t = Math.max(0, Math.min(1, (transitionValue - transitionMin) / (sandThreshold - transitionMin)));
                r = Math.round(0 * (1 - t) + 238 * t);      // De bleu oc√©an vers jaune sable
                g = Math.round(119 * (1 - t) + 203 * t);    // De bleu oc√©an vers jaune sable
                b = Math.round(190 * (1 - t) + 173 * t);    // De bleu oc√©an vers beige sable
            } else if (h < 0.35) {
                // Transition sable ‚Üí herbe √©largie (jaune sable ‚Üí vert prairie)
                const sandLevelNormalized = isRealTerrain ? 
                    ((sandThreshold * heightScale) - minAlt) / altRange : 
                    (sandThreshold - minAlt) / altRange;
                const t = Math.max(0, Math.min(1, (h - sandLevelNormalized) / (0.35 - sandLevelNormalized)));
                r = Math.round(238 * (1 - t) + 34 * t);     // Sable vers vert prairie
                g = Math.round(203 * (1 - t) + 139 * t);    // Sable vers vert prairie
                b = Math.round(173 * (1 - t) + 34 * t);     // Beige vers vert prairie
            } else if (h < 0.85) {
                // Vert vers marron avec transition plus douce
                const t = Math.max(0, Math.min(1, (h - 0.35) / 0.5));  // Zone √©tendue et liss√©e
                r = Math.round(34 * (1 - t) + 101 * t);
                g = Math.round(139 * (1 - t) + 67 * t);
                b = Math.round(34 * (1 - t) + 33 * t);
            } else {
                // Marron vers blanc (neige) avec transition plus douce
                const t = Math.max(0, Math.min(1, (h - 0.85) / 0.15));  // Zone √©largie
                r = Math.round(101 * (1 - t) + 255 * t);
                g = Math.round(67 * (1 - t) + 255 * t);
                b = Math.round(33 * (1 - t) + 255 * t);
            }
            const pixelIndex = i * 4;
            data[pixelIndex] = r;
            data[pixelIndex + 1] = g;
            data[pixelIndex + 2] = b;
            data[pixelIndex + 3] = 255;
        }
        
        ctx.putImageData(imageData, 0, 0);
        
        // Techniques avanc√©es pour √©liminer les bandes de couleur
        
        // 1. Dithering des couleurs pour briser les paliers
        const ditheredImageData = ctx.createImageData(width, height);
        const ditheredData = ditheredImageData.data;
        
        for (let i = 0; i < data.length; i += 4) {
            const ditherNoise = (Math.random() - 0.5) * 4; // Bruit l√©ger
            ditheredData[i] = Math.max(0, Math.min(255, data[i] + ditherNoise));     // R
            ditheredData[i + 1] = Math.max(0, Math.min(255, data[i + 1] + ditherNoise)); // G
            ditheredData[i + 2] = Math.max(0, Math.min(255, data[i + 2] + ditherNoise)); // B
            ditheredData[i + 3] = data[i + 3]; // A
        }
        
        ctx.putImageData(ditheredImageData, 0, 0);
        
        // 2. Lissage multi-passes pour adoucir davantage
        ctx.filter = 'blur(0.8px)';
        ctx.drawImage(canvas, 0, 0);
        ctx.filter = 'blur(0.3px)';
        ctx.drawImage(canvas, 0, 0);
        ctx.filter = 'none';
        
        // Flip le canvas en Y pour matcher l'origine de la g√©om√©trie (origine en bas)
        ctx.save();
        ctx.translate(0, height);
        ctx.scale(1, -1);
        ctx.drawImage(canvas, 0, 0);
        ctx.restore();
        
        // Cr√©e la texture Three.js avec un meilleur filtrage
        const texture = new THREE.CanvasTexture(canvas);
        texture.wrapS = THREE.ClampToEdgeWrapping;
        texture.wrapT = THREE.ClampToEdgeWrapping;
        texture.minFilter = THREE.LinearMipmapLinearFilter; // Meilleur filtrage pour r√©duire les artefacts
        texture.magFilter = THREE.LinearFilter;
        texture.generateMipmaps = true; // Active les mipmaps pour un rendu plus lisse
        
        // Utilise MeshLambertMaterial pour un √©clairage doux et un rendu liss√©
        return new THREE.MeshLambertMaterial({
            map: texture,
            side: THREE.DoubleSide, // IMPORTANT: Affiche les deux faces
            flatShading: false // IMPORTANT: Active l'interpolation des normales pour un rendu liss√©
        });
    }

    /**
     * Affiche un terrain en 3D
     */
    displayTerrain(terrainData, resetCameraPosition = true) {
        console.log(`üé® Affichage terrain: ${terrainData.name}`);
        
        // Stocke la r√©f√©rence au terrain pour l'analyse de complexit√©
        this.currentTerrainData = terrainData;
        
        // Supprime l'ancien terrain
        if (this.terrainMesh) {
            this.scene.remove(this.terrainMesh);
            this.terrainMesh.geometry.dispose();
            this.terrainMesh.material.dispose();
        }
        
        // Nettoie la sc√®ne (garde seulement les lumi√®res et le soleil 3D)
        this.scene.children = this.scene.children.filter(child => 
            child.type === 'DirectionalLight' || child.type === 'AmbientLight' || child.name === 'sun3D'
        );
        
        // Ajoute une grille de r√©f√©rence discr√®te
        const gridHelper = new THREE.GridHelper(300, 30, 0x333333, 0x333333);
        gridHelper.material.opacity = 0.3;
        gridHelper.material.transparent = true;
        this.scene.add(gridHelper);
        console.log('ÔøΩÔøΩ Grille ajout√©e');
        // Ajoute un rep√®re d'axes XYZ √† l'origine
        const axesHelper = new THREE.AxesHelper(100);
        this.scene.add(axesHelper);
        console.log('üß≠ Rep√®re XYZ ajout√©');
        
        // G√©n√®re la g√©om√©trie et le mat√©riau du terrain principal
        const geometry = this.generateTerrainGeometry(terrainData);
        const material = this.generateTerrainMaterial(terrainData);
        
        console.log(`üîß G√©om√©trie cr√©√©e: ${geometry.attributes.position.count} vertices`);
        console.log(`üé® Mat√©riau cr√©√©: ${material.type}`);
        
        // Cr√©e le mesh du terrain principal avec optimisation des ombres
        this.terrainMesh = new THREE.Mesh(geometry, material);
        this.terrainMesh.position.set(0, 0, 0); // Centr√© sur l'origine
        this.terrainMesh.receiveShadow = true;
        this.terrainMesh.castShadow = true;
        
        // Force la mise √† jour des matrices pour un meilleur shadow mapping
        this.terrainMesh.matrixAutoUpdate = true;
        this.terrainMesh.frustumCulled = false; // √âvite le culling pr√©matur√© pour les ombres
        
        this.scene.add(this.terrainMesh);
        
        console.log(`‚úÖ Mesh ajout√©: visible=${this.terrainMesh.visible}, position=(${this.terrainMesh.position.x}, ${this.terrainMesh.position.y}, ${this.terrainMesh.position.z})`);
        
        // Configure la cam√©ra (seulement si demand√©)
        if (resetCameraPosition) {
            this.resetCamera();
        }
        
        // R√©-applique la position du soleil pour s'assurer qu'elle reste correcte apr√®s le chargement
        if (this.sunMesh) {
            this.updateSunPosition(this.settings.sunPosition);
            console.log('‚òÄÔ∏è Position du soleil r√©-appliqu√©e apr√®s chargement du terrain');
        }
        
        // Force un rendu imm√©diat
        if (this.renderer && this.scene && this.camera) {
            this.renderer.render(this.scene, this.camera);
            console.log('üé¨ Rendu forc√©');
        }
        
        console.log(`‚úÖ Terrain ${terrainData.name} affich√©`);
    }

    /**
     * Met √† jour les param√®tres de rendu
     */
    updateSettings(newSettings) {
        Object.assign(this.settings, newSettings);
        
        // Met √† jour la position du soleil si elle a chang√©
        if (newSettings.sunPosition !== undefined) {
            this.updateSunPosition(newSettings.sunPosition);
        }
        
        // Met √† jour la qualit√© des ombres si elle a chang√©
        if (newSettings.shadowQuality !== undefined) {
            this.updateShadowQuality(newSettings.shadowQuality);
        }
        
        // Douceur des ombres fixe √† 3.0 - pas de mise √† jour dynamique
        
        // Recharge le terrain si n√©cessaire (sans reset de cam√©ra)
        if (this.currentTerrainData && newSettings.heightScale !== undefined) {
            this.displayTerrain(this.currentTerrainData, false);
        }
    }

    /**
     * Met √† jour la qualit√© des ombres
     */
    updateShadowQuality(quality) {
        if (!this.directionalLight || !this.directionalLight.shadow) {
            return;
        }

        const qualitySettings = {
            'low': 1024,
            'medium': 4096,
            'high': 8192,
            'ultra': 16384
        };

        const resolution = qualitySettings[quality] || 4096;
        
        // Met √† jour la r√©solution de la shadow map
        this.directionalLight.shadow.mapSize.width = resolution;
        this.directionalLight.shadow.mapSize.height = resolution;
        
        // Force la r√©g√©n√©ration de la shadow map
        this.directionalLight.shadow.map?.dispose();
        this.directionalLight.shadow.map = null;
        
        // Avertissement pour les hautes r√©solutions
        let warning = '';
        if (quality === 'ultra') {
            warning = ' ‚ö†Ô∏è ATTENTION: Consommation m√©moire √©lev√©e (~1GB VRAM)';
        }
        
        console.log(`üå´Ô∏è Qualit√© ombres mise √† jour: ${quality} (${resolution}x${resolution})${warning}`);
    }

    /**
     * Met √† jour la douceur des ombres (version simplifi√©e - PCF fixe)
     */
    updateShadowSoftness(softness) {
        if (!this.directionalLight || !this.directionalLight.shadow) {
            return;
        }

        // Stocke la valeur de douceur dans les settings
        this.settings.shadowSoftness = softness;

        // Utilise toujours PCF Soft pour les ombres douces
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        console.log(`üå´Ô∏è Douceur ombres: ${softness} (PCF Soft fixe)`);
        
        // Ajuste l'intensit√© des ombres avec la valeur fixe 3.0
        const ambientLights = this.scene.children.filter(child => child.type === 'AmbientLight');
        if (ambientLights.length > 0) {
            // Intensit√© ambiante r√©duite pour ombres tr√®s douces (3.0)
            ambientLights[0].intensity = 0.4; // Valeur fixe pour softness=3.0
        }
        
        // Force la re-application des param√®tres d'ombres
        if (this.directionalLight && this.settings.sunPosition !== undefined) {
            this.updateSunPosition(this.settings.sunPosition);
        }
    }

    /**
     * Obtient le nom lisible du type de shadow map actuel
     */
    getShadowMapTypeName() {
        switch (this.renderer.shadowMap.type) {
            case THREE.BasicShadowMap: return 'Basic';
            case THREE.PCFShadowMap: return 'PCF';
            case THREE.PCFSoftShadowMap: return 'PCF Soft';
            case THREE.VSMShadowMap: return 'VSM';
            default: return 'Unknown';
        }
    }

    /**
     * Gestion du redimensionnement
     */
    onWindowResize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }



    /**
     * Boucle d'animation
     */
    animate() {
        this.animationId = requestAnimationFrame(() => this.animate());
        
        // Met √† jour le compteur de frames pour le dithering temporel
        this.updateFrameCount();
        
        // Met √† jour les contr√¥les
        if (this.controls) {
            this.controls.update();
        }
        
        // Met √† jour l'animation de pulsation du soleil
        this.updateSunPulsing();
        
        // Force le rendu
        if (this.renderer && this.scene && this.camera) {
            this.renderer.render(this.scene, this.camera);
        }
    }

    /**
     * G√©n√®re un pattern de dithering temporel stable
     */
    generateDitherPattern() {
        const patternSize = 16;
        const pattern = [];
        
        for (let i = 0; i < patternSize; i++) {
            // Pattern en spirale de Halton pour distribution uniforme
            const angle = i * 2.399963229728653; // Angle d'or
            const radius = Math.sqrt(i / patternSize) * 0.02; // Rayon progressif
            pattern.push({
                x: Math.cos(angle) * radius,
                z: Math.sin(angle) * radius
            });
        }
        
        return pattern;
    }
    
    /**
     * Obtient l'offset de dithering temporel stable
     */
    getTemporalDither() {
        const patternIndex = this.frameCount % this.ditherPattern.length;
        this.frameCount++;
        
        // Ajoute une l√©g√®re variation temporelle pour √©viter les motifs fixes
        const timeVariation = Math.sin(this.frameCount * 0.01) * 0.005;
        
        return {
            x: this.ditherPattern[patternIndex].x + timeVariation,
            z: this.ditherPattern[patternIndex].z + timeVariation
        };
    }
    
    /**
     * Calcule le bias adaptatif intelligent bas√© sur l'angle et la distance
     */
    calculateSmartBias(angle, height, angleFactor, heightNormalized, isEdgeCase, isCriticalAngle, isExtremeAngle) {
        // Facteur de distance : plus le soleil est loin, plus on a besoin de bias
        const distanceFactor = Math.max(0.1, Math.min(1.0, height / 100));
        
        // Facteur d'angle : les angles rasants n√©cessitent plus de correction
        const angleStress = Math.pow(angleFactor, 1.5); // Courbe non-lin√©aire
        
        // Facteur de terrain : adapt√© √† la complexit√© du terrain
        const terrainComplexity = this.getTerrainComplexityFactor();
        
        let baseBias, normalBias, radius;
        
        if (isEdgeCase) {
            // Cas tr√®s extr√™mes avec correction intelligente
            baseBias = -0.0002 * (1 + angleStress) * terrainComplexity - 0.0001 * (1 - distanceFactor);
            normalBias = 0.02 + (0.015 * angleStress) + (0.01 * terrainComplexity);
            radius = 8 + (4 * angleStress) + (2 * terrainComplexity);
            console.log(`üö® Bias adaptatif CRITIQUE activ√©: angle=${angle.toFixed(0)}¬∞, bias=${baseBias.toFixed(5)}`);
        } else if (isCriticalAngle) {
            // Angles critiques avec adaptation progressive
            baseBias = -0.00015 * (1 + angleStress * 0.8) * terrainComplexity - 0.00008 * (1 - distanceFactor);
            normalBias = 0.015 + (0.012 * angleStress) + (0.008 * terrainComplexity);
            radius = 6 + (3 * angleStress) + (1.5 * terrainComplexity);
        } else if (isExtremeAngle) {
            // Angles extr√™mes avec correction mod√©r√©e
            baseBias = -0.0001 * (1 + angleStress * 0.6) * terrainComplexity - 0.00005 * (1 - distanceFactor);
            normalBias = 0.012 + (0.01 * angleStress) + (0.006 * terrainComplexity);
            radius = 5 + (2 * angleStress) + (1 * terrainComplexity);
        } else {
            // Angles normaux avec param√®tres optimaux
            baseBias = -0.00008 * terrainComplexity - 0.00003 * (1 - heightNormalized);
            normalBias = 0.01 + (0.005 * terrainComplexity) + (0.003 * (1 - heightNormalized));
            radius = 4 + (2 * terrainComplexity) + (1 * (1 - heightNormalized));
        }
        
        // Assure des valeurs dans des plages raisonnables
        baseBias = Math.max(-0.001, Math.min(0, baseBias));
        normalBias = Math.max(0.005, Math.min(0.05, normalBias));
        radius = Math.max(2, Math.min(12, radius));
        
        return { bias: baseBias, normalBias, radius };
    }
    
    /**
     * Estime la complexit√© du terrain pour adapter les param√®tres d'ombres
     */
    getTerrainComplexityFactor() {
        if (!this.currentTerrainData || !this.currentTerrainData.stats) {
            return 1.0; // Valeur par d√©faut
        }
        
        const stats = this.currentTerrainData.stats;
        
        // Combine plusieurs m√©triques pour estimer la complexit√©
        const roughnessFactor = Math.min(2.0, stats.roughness * 5); // Rugosit√© du terrain
        const elevationRange = stats.max - stats.min; // √âtendue d'√©l√©vation
        const variabilityFactor = Math.min(2.0, stats.stdDev * 3); // Variabilit√©
        
        // Facteur de complexit√© combin√© (entre 0.5 et 2.5)
        const complexity = 0.5 + (roughnessFactor + elevationRange + variabilityFactor) / 3;
        
        return Math.max(0.5, Math.min(2.5, complexity));
    }
    
    /**
     * Met √† jour le compteur de frames pour le dithering temporel
     */
    updateFrameCount() {
        this.frameCount = (this.frameCount + 1) % 10000; // √âvite l'overflow
    }
    
    /**
     * G√©n√®re une depth map bas√©e sur la vue actuelle de la cam√©ra
     * @param {number} width - Largeur de la depth map (d√©faut: 512)
     * @param {number} height - Hauteur de la depth map (d√©faut: 512)
     * @returns {Object} - Objet contenant la depth map et les m√©tadonn√©es
     */
    generateDepthMap(width = 512, height = 512) {
        if (!this.renderer || !this.scene || !this.camera) {
            console.error('‚ùå Impossible de g√©n√©rer la depth map: renderer, scene ou camera non initialis√©s');
            return null;
        }

        console.log(`üìä G√©n√©ration de depth map ${width}x${height}...`);

        // Sauvegarde les param√®tres actuels du renderer
        const originalSize = this.renderer.getSize(new THREE.Vector2());
        const originalPixelRatio = this.renderer.getPixelRatio();

        try {
            // Configure le renderer pour la capture
            this.renderer.setSize(width, height);
            this.renderer.setPixelRatio(1); // √âvite l'upscaling

            // Cr√©e un render target avec texture de profondeur
            const renderTarget = new THREE.WebGLRenderTarget(width, height, {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                format: THREE.RGBAFormat,
                type: THREE.FloatType,
                depthTexture: new THREE.DepthTexture()
            });

            // Active le rendu de la depth map
            this.renderer.setRenderTarget(renderTarget);
            
            // Rendu de la sc√®ne avec les mat√©riaux originaux
            this.renderer.render(this.scene, this.camera);

            // Cr√©e un shader de post-processing pour lire la texture de profondeur
            const postProcessShader = {
                vertexShader: `
                    varying vec2 vUv;
                    void main() {
                        vUv = uv;
                        gl_Position = vec4(position, 1.0);
                    }
                `,
                fragmentShader: `
                    uniform sampler2D depthTexture;
                    uniform float near;
                    uniform float far;
                    varying vec2 vUv;
                    
                    void main() {
                        // Inverse les coordonn√©es Y pour corriger l'orientation
                        vec2 correctedUv = vec2(vUv.x, 1.0 - vUv.y);
                        
                        // Lit la valeur de profondeur depuis la texture
                        float depth = texture2D(depthTexture, correctedUv).r;
                        
                        // Convertit la profondeur normalis√©e en distance lin√©aire
                        float linearDepth = (2.0 * near * far) / (far + near - depth * (far - near));
                        
                        // Normalise entre 0 et 1
                        float normalizedDepth = (linearDepth - near) / (far - near);
                        normalizedDepth = clamp(normalizedDepth, 0.0, 1.0);
                        
                        // Applique une transformation pour am√©liorer le contraste
                        float enhancedDepth = pow(normalizedDepth, 0.3);
                        
                        // Inverse pour que les objets proches soient blancs
                        float invertedDepth = 1.0 - enhancedDepth;
                        
                        gl_FragColor = vec4(invertedDepth, invertedDepth, invertedDepth, 1.0);
                    }
                `
            };

            // Cr√©e un mat√©riau de post-processing
            const postProcessMaterial = new THREE.ShaderMaterial({
                vertexShader: postProcessShader.vertexShader,
                fragmentShader: postProcessShader.fragmentShader,
                uniforms: {
                    depthTexture: { value: renderTarget.depthTexture },
                    near: { value: this.camera.near },
                    far: { value: this.camera.far }
                }
            });

            // Cr√©e un plan pour le post-processing
            const postProcessPlane = new THREE.PlaneGeometry(2, 2);
            const postProcessMesh = new THREE.Mesh(postProcessPlane, postProcessMaterial);

            // Cr√©e un render target pour le r√©sultat final
            const finalRenderTarget = new THREE.WebGLRenderTarget(width, height, {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                format: THREE.RGBAFormat,
                type: THREE.FloatType
            });

            // Rendu du post-processing
            this.renderer.setRenderTarget(finalRenderTarget);
            this.renderer.render(postProcessMesh, new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1));

            // R√©cup√®re les donn√©es de profondeur
            const depthData = new Float32Array(width * height * 4);
            this.renderer.readRenderTargetPixels(finalRenderTarget, 0, 0, width, height, depthData);

            // Convertit les donn√©es de profondeur en image
            const depthImage = this.convertDepthToImage(depthData, width, height);

            // R√©cup√®re les m√©tadonn√©es de la cam√©ra
            const cameraInfo = {
                position: this.camera.position.clone(),
                rotation: this.camera.rotation.clone(),
                fov: this.camera.fov,
                aspect: this.camera.aspect,
                near: this.camera.near,
                far: this.camera.far
            };

            // Restaure les param√®tres originaux
            this.renderer.setRenderTarget(null);
            this.renderer.setSize(originalSize.x, originalSize.y);
            this.renderer.setPixelRatio(originalPixelRatio);

            // Nettoie les ressources
            renderTarget.dispose();
            finalRenderTarget.dispose();
            postProcessMaterial.dispose();
            postProcessPlane.dispose();

            console.log(`‚úÖ Depth map g√©n√©r√©e: ${width}x${height}`);
            
            return {
                depthData: depthData,
                depthImage: depthImage,
                width: width,
                height: height,
                cameraInfo: cameraInfo,
                timestamp: Date.now()
            };

        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de la depth map:', error);
            
            // Restaure les param√®tres en cas d'erreur
            this.renderer.setRenderTarget(null);
            this.renderer.setSize(originalSize.x, originalSize.y);
            this.renderer.setPixelRatio(originalPixelRatio);
            
            return null;
        }
    }

    /**
     * Convertit les donn√©es de profondeur en image visible
     * @param {Float32Array} depthData - Donn√©es de profondeur RGBA
     * @param {number} width - Largeur
     * @param {number} height - Hauteur
     * @returns {ImageData} - Image convertie
     */
    convertDepthToImage(depthData, width, height) {
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        const imageData = ctx.createImageData(width, height);
        const data = imageData.data;

        // Les donn√©es sont d√©j√† trait√©es par le shader (0-1)
        // Le shader inverse d√©j√† la profondeur (blanc = proche, noir = lointain)
        
        for (let i = 0; i < depthData.length; i += 4) {
            const pixelIndex = i;
            const depth = depthData[i]; // Canal R (d√©j√† trait√© par le shader)
            
            if (depth >= 0 && depth <= 1) {
                // Convertit directement en niveaux de gris
                const intensity = Math.floor(depth * 255);
                
                data[pixelIndex] = intensity;     // R
                data[pixelIndex + 1] = intensity; // G
                data[pixelIndex + 2] = intensity; // B
                data[pixelIndex + 3] = 255;       // A
            } else {
                // Pixels sans profondeur (fond) en noir
                data[pixelIndex] = 0;     // R
                data[pixelIndex + 1] = 0; // G
                data[pixelIndex + 2] = 0; // B
                data[pixelIndex + 3] = 255; // A
            }
        }

        return imageData;
    }

    /**
     * Arr√™te l'animation
     */
    dispose() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        // Nettoie le soleil 3D
        if (this.sunMesh) {
            this.scene.remove(this.sunMesh);
            this.sunMesh.geometry.dispose();
            this.sunMesh.material.dispose();
            this.sunMesh = null;
        }
        this.sunAnimationReady = false;
        
        if (this.renderer) {
            this.renderer.dispose();
        }
    }
} 