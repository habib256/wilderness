#!/usr/bin/env python3
"""
Script de g√©n√©ration de heightmap haute r√©solution pour l'√Æle de Yakushima (Japon).

Yakushima est une √Æle japonaise class√©e au patrimoine mondial de l'UNESCO,
connue pour ses reliefs granitiques spectaculaires et sa for√™t de c√®dres mill√©naires.

Caract√©ristiques topographiques :
- Mont Miyanoura : 1 936 m (point culminant)
- Gradient altitudinal : Mer ‚Üí 1 936 m en 13 km
- Relief granitique fractur√© avec ar√™tes radio-convergentes
- 46 sommets > 1 000 m
- Cascade de Senpiro (60 m)
- For√™t de J≈çmon-sugi (c√®dres > 2 000 ans)

Zones disponibles :
- full : √éle compl√®te (site UNESCO)
- central : Zone centrale avec Mont Miyanoura
- jomon : For√™t de J≈çmon-sugi
- senpiro : Cascade de Senpiro et ravins
- steep : Zone c√¥te-√†-colline la plus abrupte
- wide : Vue large et √©loign√©e (zone √©tendue)
"""

import sys
import os
from pathlib import Path
import numpy as np
from PIL import Image
import argparse
import logging
from typing import Optional

# Ajoute le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from terrain_gen.real_terrain_extractor import YakushimaTerrainExtractor
from terrain_gen.progress import ProgressTracker, ConsoleProgressCallback, set_progress_tracker

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def generate_yakushima_heightmap(zone: str = "full", 
                                resolution: str = "4k",
                                output_dir: str = "output",
                                api_key: Optional[str] = None) -> bool:
    """
    G√©n√®re une heightmap de Yakushima.
    
    Args:
        zone: Zone √† extraire ("full", "central", "jomon", "senpiro", "steep")
        resolution: R√©solution ("4k" ou "1k")
        output_dir: R√©pertoire de sortie
        api_key: Cl√© API OpenTopography (optionnelle)
        
    Returns:
        True si succ√®s, False sinon
    """
    print(f"üåø G√©n√©ration heightmap Yakushima - Zone: {zone}, R√©solution: {resolution}")
    print("=" * 60)
    
    # Configure le syst√®me de progression
    progress_tracker = ProgressTracker()
    console_callback = ConsoleProgressCallback(show_details=True)
    progress_tracker.add_callback(console_callback)
    set_progress_tracker(progress_tracker)
    progress_tracker.start()
    
    try:
        # Cr√©e le r√©pertoire de sortie
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # Initialise l'extracteur
        extractor = YakushimaTerrainExtractor(api_key=api_key)
        
        # Extrait les donn√©es selon la r√©solution
        if resolution == "4k":
            heightmap = extractor.extract_yakushima_4k(zone=zone)
            suffix = "4k"
        else:
            heightmap = extractor.extract_yakushima_1k(zone=zone)
            suffix = "1k"
        
        # Redimensionne √† une r√©solution plus √©lev√©e pour la visualisation
        if heightmap is not None and heightmap.shape[0] < 1024:
            from scipy.ndimage import zoom
            scale_factor = 1024 / heightmap.shape[0]
            heightmap = zoom(heightmap, scale_factor, order=1)
            print(f"üìè Redimensionn√© de {heightmap.shape[0]//scale_factor}√ó{heightmap.shape[1]//scale_factor} √† {heightmap.shape[0]}√ó{heightmap.shape[1]}")
        
        if heightmap is None:
            logger.error("‚ùå √âchec de l'extraction des donn√©es")
            return False
        
        # Informations sur les donn√©es extraites
        print(f"\nüìä Donn√©es extraites:")
        print(f"   Taille: {heightmap.shape[0]}√ó{heightmap.shape[1]} pixels")
        print(f"   Altitude min: {heightmap.min():.3f}")
        print(f"   Altitude max: {heightmap.max():.3f}")
        print(f"   Range: [{heightmap.min():.3f}, {heightmap.max():.3f}]")
        
        # Sauvegarde en PNG 16-bit
        progress_tracker.start_stage("SAVING", f"Sauvegarde heightmap Yakushima")
        
        png_filename = f"yakushima_{zone}_{suffix}.png"
        png_path = output_path / png_filename
        
        data_16bit = (heightmap * 65535).astype(np.uint16)
        img = Image.fromarray(data_16bit, mode='I;16')
        img.save(png_path)
        
        print(f"‚úÖ Heightmap sauvegard√©e: {png_path}")
        
        # Sauvegarde en format RAW (Float32)
        raw_filename = f"yakushima_{zone}_{suffix}.raw"
        raw_path = output_path / raw_filename
        
        heightmap.astype(np.float32).tofile(raw_path)
        print(f"‚úÖ Donn√©es RAW sauvegard√©es: {raw_path}")
        
        # G√©n√®re une preview color√©e
        preview_filename = f"yakushima_{zone}_{suffix}_preview.png"
        preview_path = output_path / preview_filename
        
        # Cr√©e une preview avec colormap terrain
        preview_data = (heightmap * 255).astype(np.uint8)
        preview_img = Image.fromarray(preview_data, mode='L')
        preview_img.save(preview_path)
        
        print(f"‚úÖ Preview g√©n√©r√©e: {preview_path}")
        
        # Statistiques finales
        print(f"\nüéØ Statistiques finales:")
        print(f"   Fichier principal: {png_filename}")
        print(f"   Donn√©es brutes: {raw_filename}")
        print(f"   Preview: {preview_filename}")
        print(f"   Taille fichier: {png_path.stat().st_size / 1024 / 1024:.1f} MB")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return False


def main():
    """Interface CLI pour la g√©n√©ration de heightmaps Yakushima."""
    parser = argparse.ArgumentParser(
        description="G√©n√©rateur de heightmaps haute r√©solution pour l'√Æle de Yakushima (Japon)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  # √éle compl√®te en haute r√©solution
  python generate_yakushima_4k.py --zone full --resolution 4k
  
  # Zone centrale avec Mont Miyanoura
  python generate_yakushima_4k.py --zone central --resolution 4k
  
  # For√™t de J≈çmon-sugi en basse r√©solution
  python generate_yakushima_4k.py --zone jomon --resolution 1k
  
  # Cascade de Senpiro
  python generate_yakushima_4k.py --zone senpiro --resolution 4k
  
  # Zone c√¥te-√†-colline la plus abrupte
  python generate_yakushima_4k.py --zone steep --resolution 4k
  
  # Vue large et √©loign√©e
  python generate_yakushima_4k.py --zone wide --resolution 4k
        """
    )
    
    parser.add_argument(
        "--zone", 
        choices=["full", "central", "jomon", "senpiro", "steep", "wide"],
        default="full",
        help="Zone de Yakushima √† extraire (d√©faut: full)"
    )
    
    parser.add_argument(
        "--resolution",
        choices=["4k", "1k"],
        default="4k",
        help="R√©solution de sortie (d√©faut: 4k)"
    )
    
    parser.add_argument(
        "--output-dir",
        type=str,
        default="output",
        help="R√©pertoire de sortie (d√©faut: output)"
    )
    
    parser.add_argument(
        "--api-key",
        type=str,
        default=None,
        help="Cl√© API OpenTopography (optionnelle)"
    )
    
    parser.add_argument(
        "--no-progress",
        action="store_true",
        help="D√©sactive l'affichage de la progression"
    )
    
    args = parser.parse_args()
    
    # Affiche les informations sur Yakushima
    print("üèîÔ∏è √éle de Yakushima (Japon) - Site UNESCO")
    print("=" * 60)
    print("üìç Coordonn√©es: 30.358¬∞N, 130.532¬∞E")
    print("üèîÔ∏è Mont Miyanoura: 1 936 m (point culminant)")
    print("üåø For√™t de J≈çmon-sugi: C√®dres mill√©naires")
    print("üíß Cascade de Senpiro: 60 m de hauteur")
    print("üåä Gradient: Mer ‚Üí 1 936 m en 13 km")
    print("üèõÔ∏è Patrimoine UNESCO depuis 1993")
    print()
    
    # G√©n√®re la heightmap
    success = generate_yakushima_heightmap(
        zone=args.zone,
        resolution=args.resolution,
        output_dir=args.output_dir,
        api_key=args.api_key
    )
    
    if success:
        print(f"\nüéâ G√©n√©ration Yakushima {args.zone} {args.resolution} termin√©e avec succ√®s!")
        print("üåø Les fichiers sont disponibles dans le r√©pertoire de sortie.")
    else:
        print(f"\n‚ùå √âchec de la g√©n√©ration Yakushima {args.zone} {args.resolution}")
        sys.exit(1)


if __name__ == "__main__":
    main() 