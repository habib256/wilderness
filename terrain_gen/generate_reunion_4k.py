#!/usr/bin/env python3
"""
G√©n√©rateur de heightmap 4K de l'√Æle de la R√©union avec donn√©es r√©elles.

Ce script g√©n√®re une heightmap haute r√©solution 4096x4096 de l'√Æle de la R√©union
en utilisant les donn√©es d'√©l√©vation SRTM depuis les APIs internet.
"""

import sys
import os
from pathlib import Path
import time

# Ajoute le module terrain_gen au path
project_root = Path(__file__).parent.parent  # Remonte d'un niveau
sys.path.insert(0, str(project_root))

try:
    from terrain_gen.real_terrain_extractor import ReunionTerrainExtractor
    from terrain_gen.progress import ProgressTracker, ConsoleProgressCallback, set_progress_tracker
    import numpy as np
    from PIL import Image
    print("‚úÖ Modules terrain_gen import√©s avec succ√®s")
except ImportError as e:
    print("‚ùå Erreur d'import:")
    print(f"   {e}")
    print("üí° Installez les d√©pendances: pip install -r requirements.txt")
    sys.exit(1)

def main():
    """G√©n√©ration heightmap 4K de la R√©union."""
    
    print("üèùÔ∏è G√©n√©ration Heightmap Haute R√©solution - √éle de la R√©union")
    print("=" * 62)
    print("üéØ Priorit√©: Donn√©es NATIVES sans upscaling artificiel")
    print("üìê R√©solution: Maximum disponible en donn√©es r√©elles")
    print("üì° Source: NASA SRTM (Shuttle Radar Topography Mission)")
    print("‚ö†Ô∏è  Attention: Ce processus peut prendre plusieurs minutes")
    print()
    
    # V√©rifie la connexion internet
    try:
        import requests
        response = requests.get("https://httpbin.org/ip", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Connexion internet OK")
        else:
            print("‚ö†Ô∏è Connexion internet limit√©e")
    except Exception:
        print("‚ùå Pas de connexion internet - l'extraction √©chouera")
        return
    
    # Estime la taille du t√©l√©chargement
    print("üìä Approche:")
    print("   ‚Ä¢ Donn√©es SRTM natives 30m-90m r√©solution")
    print("   ‚Ä¢ AUCUN upscaling ou interpolation artificielle")
    print("   ‚Ä¢ R√©solution finale: D√©pend des donn√©es disponibles")
    print("   ‚Ä¢ Qualit√©: 100% donn√©es r√©elles mesur√©es")
    print("   ‚Ä¢ Taille estim√©e: 5-30 MB selon r√©solution obtenue")
    print()
    
    # Demande confirmation
    response = input("Continuer ? [y/N]: ").lower().strip()
    if response not in ['y', 'yes', 'o', 'oui']:
        print("‚ùå G√©n√©ration annul√©e")
        return
    
    # Configure le syst√®me de progression
    progress_tracker = ProgressTracker()
    console_callback = ConsoleProgressCallback(show_details=True)
    progress_tracker.add_callback(console_callback)
    set_progress_tracker(progress_tracker)
    progress_tracker.start()
    
    # Cr√©e le dossier de sortie
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    
    start_time = time.time()
    
    try:
        # Initialise l'extracteur
        print("\nüîß Initialisation de l'extracteur...")
        extractor = ReunionTerrainExtractor()
        
        # Extraction donn√©es natives haute r√©solution
        print("\nüì° Extraction donn√©es natives haute r√©solution...")
        print("   üìç Zone: √éle compl√®te")
        print("   üìè Coordonn√©es: 21.13¬∞S, 55.53¬∞E")
        print("   üìê Dimensions: ~58 √ó 69 km")
        print("   üéØ Strat√©gie: R√©solution native maximale disponible")
        print()
        
        # Appel extraction native haute r√©solution
        heightmap = extractor.extract_reunion_4k()
        
        if heightmap is not None:
            elapsed_time = time.time() - start_time
            
            # D√©termine le nom de fichier bas√© sur la r√©solution r√©elle
            resolution = heightmap.shape[0]
            if resolution >= 3000:
                base_name = "reunion_real_4k"
            elif resolution >= 1800:
                base_name = "reunion_real_2k"  
            elif resolution >= 1200:
                base_name = "reunion_real_hd"
            else:
                base_name = "reunion_real_native"
                
            output_png = output_dir / f"{base_name}.png"
            output_web = Path("web/images") / f"{base_name}.png"
            
            print(f"\nüíæ Sauvegarde des fichiers...")
            
            # Sauvegarde PNG 16-bit principal
            data_16bit = (heightmap * 65535).astype(np.uint16)
            img = Image.fromarray(data_16bit, mode='I;16')
            img.save(output_png)
            
            # Copie vers web/images pour utilisation imm√©diate
            if output_web.parent.exists():
                img.save(output_web)
                print(f"   ‚úÖ Copi√© vers web/images pour utilisation imm√©diate")
            
            # Sauvegarde PNG 8-bit pour visualisation
            output_8bit = output_dir / f"{base_name}_preview.png"
            data_8bit = (heightmap * 255).astype(np.uint8)
            img_8bit = Image.fromarray(data_8bit, mode='L')
            img_8bit.save(output_8bit)
            
            # Sauvegarde donn√©es raw
            output_raw = output_dir / f"{base_name}.raw"
            heightmap.astype(np.float32).tofile(output_raw)
            
            # Statistiques finales avec r√©solution r√©elle
            resolution = heightmap.shape[0]
            lat_km, lon_km = 58, 69  # Dimensions approximatives de la R√©union
            meters_per_pixel = (lat_km * 1000) / resolution
            
            print(f"\nüéâ Extraction native r√©ussie!")
            print(f"‚è±Ô∏è  Temps total: {elapsed_time:.1f} secondes")
            print(f"üìä Statistiques:")
            print(f"   ‚Ä¢ R√©solution: {resolution}x{resolution} pixels")
            print(f"   ‚Ä¢ Pr√©cision: ~{meters_per_pixel:.1f}m par pixel")
            print(f"   ‚Ä¢ Min: {np.min(heightmap):.4f}")
            print(f"   ‚Ä¢ Max: {np.max(heightmap):.4f}")
            print(f"   ‚Ä¢ Moyenne: {np.mean(heightmap):.4f}")
            print(f"   ‚Ä¢ √âcart-type: {np.std(heightmap):.4f}")
            print(f"   ‚Ä¢ Taille m√©moire: {heightmap.nbytes / 1024 / 1024:.1f} MB")
            print(f"   ‚Ä¢ üéØ Donn√©es 100% natives (aucun upscaling)")
            
            print(f"\nüìÅ Fichiers g√©n√©r√©s:")
            print(f"   ‚Ä¢ {output_png} ({output_png.stat().st_size / 1024 / 1024:.1f} MB)")
            print(f"   ‚Ä¢ {output_8bit} (preview)")
            print(f"   ‚Ä¢ {output_raw} (donn√©es raw)")
            if output_web.exists():
                print(f"   ‚Ä¢ {output_web} (web ready)")
            
            print(f"\nüåê Utilisation:")
            print(f"   ‚Ä¢ Remplacez reunion_real_1k.png par {base_name}.png")
            print(f"   ‚Ä¢ Mise √† jour automatique dans l'interface web")
            ratio = (resolution / 1024) ** 2
            print(f"   ‚Ä¢ R√©solution {ratio:.1f}x sup√©rieure √† la version 1K")
            
            # Info g√©ographique d√©taill√©e
            print(f"\nüó∫Ô∏è D√©tails g√©ographiques:")
            print(f"   ‚Ä¢ R√©solution terrain: ~{meters_per_pixel:.1f}m par pixel")
            print(f"   ‚Ä¢ Couverture: √éle compl√®te de la R√©union")
            print(f"   ‚Ä¢ Point culminant: Piton des Neiges (3,070m)")
            print(f"   ‚Ä¢ Volcan actif: Piton de la Fournaise")
            print(f"   ‚Ä¢ Source: NASA SRTM donn√©es natives")
            print(f"   ‚Ä¢ Pr√©cision verticale: ¬±16m (SRTM)")
            print(f"   ‚Ä¢ ‚úÖ Qualit√©: Donn√©es mesur√©es r√©elles")
            
        else:
            print(f"\n‚ùå √âchec de l'extraction haute r√©solution")
            print(f"üí° Causes possibles:")
            print(f"   ‚Ä¢ Connexion internet insuffisante")
            print(f"   ‚Ä¢ Services SRTM temporairement indisponibles")
            print(f"   ‚Ä¢ Quotas API d√©pass√©s")
            print(f"   ‚Ä¢ Toutes les r√©solutions natives ont √©chou√©")
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è G√©n√©ration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration haute r√©solution:")
        print(f"   {e}")
        print(f"üí° Solutions:")
        print(f"   ‚Ä¢ V√©rifiez votre connexion internet")
        print(f"   ‚Ä¢ Assurez-vous d'avoir assez de RAM (>1GB libre)")
        print(f"   ‚Ä¢ R√©essayez avec la version 1K standard")
        print(f"   ‚Ä¢ V√©rifiez que rasterio est install√©: pip install rasterio")

if __name__ == "__main__":
    main()